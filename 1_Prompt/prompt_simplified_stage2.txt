Based on your analysis from plan_text, now generate the actual assignment solution.

Follow these rules:
1. Use the eligibility matrix you created.
2. Assign tasks according to your proposed strategy.
3. Verify each assignment satisfies all constraints.

Each assignment must follow this format:
[worker_id, task_id, period_id, 240.0]

This means:
- worker_id: integer
- task_id: integer
- period_id: integer (starting period)
- 240.0: fixed number, representing 240 minutes per unit

The final output must be a JSON object that exactly matches the following schema (in JSON Schema format):

{
  "type": "object",
  "properties": {
    "worker_task_period_assignments": {
      "type": "array",
      "items": {
        "type": "array",
        "minItems": 4,
        "maxItems": 4,
        "items": { "type": "number" }
      }
    }
  },
  "required": ["worker_task_period_assignments"],
  "additionalProperties": false
}

**Examples**:
- Single period task: Worker 1 does Task 2 (240 minutes) in period 5
  [1, 2, 5, 240.0]

- Multi-period task: Worker 3 does Task 4 (480 minutes) starting period 2
  [3, 4, 2, 240.0]
  [3, 4, 3, 240.0]

Do not include any explanations, headers, comments, or notes. Only output a valid JSON object that can be parsed using json.loads().